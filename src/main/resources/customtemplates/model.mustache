package {{package}};

// =====================================================================================================================
// I M P O R T   S E C T I O N
// =====================================================================================================================
import java.util.Objects;
{{#imports}}import {{import}};
{{/imports}}
{{#openApiNullable}}
import org.openapitools.jackson.nullable.JsonNullable;
{{/openApiNullable}}
{{#serializableModel}}
import java.io.Serializable;
{{/serializableModel}}
import java.time.OffsetDateTime;
{{#useBeanValidation}}
import {{javaxPackage}}.validation.Valid;
import {{javaxPackage}}.validation.constraints.*;
{{/useBeanValidation}}
{{^useBeanValidation}}
import {{javaxPackage}}.validation.constraints.NotNull;
{{/useBeanValidation}}
{{#performBeanValidation}}
import org.hibernate.validator.constraints.*;
{{/performBeanValidation}}
{{#jackson}}
{{#withXml}}
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
{{/withXml}}
{{/jackson}}
{{#swagger2AnnotationLibrary}}
import io.swagger.v3.oas.annotations.media.Schema;
{{/swagger2AnnotationLibrary}}

{{#withXml}}
import {{javaxPackage}}.xml.bind.annotation.*;
{{/withXml}}
{{^parent}}
{{#hateoas}}
import org.springframework.hateoas.RepresentationModel;
{{/hateoas}}
{{/parent}}

import java.util.*;
import {{javaxPackage}}.annotation.Generated;

{{#models}}
{{#model}}
{{#additionalPropertiesType}}
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
{{/additionalPropertiesType}}

{{^isEnum}} 
{{#vendorExtensions.x-is-one-of-interface}}{{>oneof_interface}}{{/vendorExtensions.x-is-one-of-interface}}{{^vendorExtensions.x-is-one-of-interface}}

// =====================================================================================================================
// M O D E L   C L A S S   S E C T I O N
// 
// =====================================================================================================================
@JsonTypeName("{{schemaName}}")
public class {{classname}} {

    {{#vars}}
    @JsonProperty("{{baseName}}")
    private {{datatype}} {{baseName}};

    {{/vars}}

    // =====================================================================================================================
    // getters and setters
    {{#vars}}
    public {{datatype}} get{{baseName}}() {
        return {{baseName}};
    }

    public void set{{baseName}}({{datatype}} {{baseName}}) {
        this.{{baseName}} = {{baseName}};
    }
    {{/vars}}

    // =====================================================================================================================
    // non-argument constructor
    public {{classname}}() {}

    // =====================================================================================================================
    // business logic method


    // standard object methods equals, hashCode, and toString
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        {{classname}} that = ({{classname}}) o;
        return {{#vars}}
            Objects.equals({{baseName}}, that.{{baseName}}) {{^isLast}}&&{{/isLast}}{{/vars}};
    }


    @Override
    public int hashCode() {
        return Objects.hash({{#vars}}
            {{baseName}}{{^isLast}},{{/isLast}}{{/vars}});

    }

    @Override
    public String toString() {
        return "{{classname}}{" +
                {{#vars}}
                "{{baseName}}=" + {{baseName}} + 
                {{/vars}} 
                "}";
    }
}
{{/vendorExtensions.x-is-one-of-interface}}
{{/isEnum}}

{{/model}}
{{/models}}
