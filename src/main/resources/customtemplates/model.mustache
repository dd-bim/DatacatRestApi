package {{package}};

// =====================================================================================================================
// I M P O R T   S E C T I O N
// =====================================================================================================================
{{#import}}
import java.util.*;
{{#additionalPropertiesType}}
import java.util.Objects;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Object;
import java.util.Map;
import java.util.HashMap;
import org.springframework.format.annotation.DateTimeFormat;
{{/additionalPropertiesType}}
{{#jackson}}
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
{{/jackson}}
import datacat.customization.DefaultValuesHandler;
{{/imports}}
{{#models}}
{{#model}}
{{^isEnum}} 
{{#vendorExtensions.x-is-one-of-interface}}{{>oneof_interface}}{{/vendorExtensions.x-is-one-of-interface}}{{^vendorExtensions.x-is-one-of-interface}}

// =====================================================================================================================
// M O D E L   C L A S S   S E C T I O N
// 
// =====================================================================================================================
@JsonTypeName("{{schemaName}}")
public class {{classname}} {

    {{#vars}}
    @JsonProperty("{{baseName}}")
    private {{datatype}} {{baseName}};

    {{/vars}}

    // =====================================================================================================================
    // non-argument constructor
    public {{classname}}() {
        DefaultValuesHandler.ensureDefaults(this);
    }

    
    // =====================================================================================================================
    // getters and setters
    {{#vars}}
    public {{datatype}} get{{baseName}}() {
        return {{baseName}};
    }

    public void set{{baseName}}({{datatype}} {{baseName}}) {
        this.{{baseName}} = {{baseName}};
    }
    {{/vars}}

    // =====================================================================================================================
    // business logic method
    public void generateUri(String serverUrl) {
        if(this.uri != null) {
            this.uri = serverUrl + "/BASEPATH/" + this.uri;
        }
    }

    //public void transformToLowerCase() {
    //    if(this.code != null) {
    //        this.code = this.code.toLowerCase();
    //    }
    //}


    // standard object methods equals, hashCode, and toString
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        {{classname}} that = ({{classname}}) o;
        return {{#vars}}
            Objects.equals({{baseName}}, that.{{baseName}}) {{^isLast}}&&{{/isLast}}{{/vars}};
    }


    @Override
    public int hashCode() {
        return Objects.hash({{#vars}}
            {{baseName}}{{^isLast}},{{/isLast}}{{/vars}});

    }

    @Override
    public String toString() {
        return "{{classname}}{" +
                {{#vars}}
                "{{baseName}}=" + {{baseName}} + 
                {{/vars}} 
                "}";
    }
}
{{/vendorExtensions.x-is-one-of-interface}}
{{/isEnum}}

{{/model}}
{{/models}}
