package {{configPackage}};

import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.tags.Tag;
import io.swagger.v3.oas.models.servers.Server;
import io.swagger.v3.oas.models.security.SecurityScheme;

@Configuration
public class SpringDocConfiguration {

    @Bean(name = "{{configPackage}}.SpringDocConfiguration.apiInfo")
    OpenAPI apiInfo() {
        return new OpenAPI()
            .info(
                new Info(){{#appName}}
                    .title("{{appName}}"){{/appName}}
                    .description("{{{appDescription}}}"){{#termsOfService}}
                    .termsOfService("{{termsOfService}}"){{/termsOfService}}{{#openAPI}}{{#info}}{{#contact}}
                    .contact(
                        new Contact(){{#infoName}}
                            .name("{{infoName}}"){{/infoName}}{{#infoUrl}}
                            .url("{{infoUrl}}"){{/infoUrl}}{{#infoEmail}}
                            .email("{{infoEmail}}"){{/infoEmail}}
                    ){{/contact}}{{#license}}
                    .license(
                            new License()
                                    {{#licenseInfo}}.name("{{licenseInfo}}")
                                    {{/licenseInfo}}{{#licenseUrl}}.url("{{licenseUrl}}")
                                    {{/licenseUrl}}
                    ){{/license}}{{/info}}{{/openAPI}}
                    .version("{{appVersion}}")
    )
    .tags(List.of(
        new Tag().name("Class").description("Operations about classes"),
        new Tag().name("Dictionary").description("Operations about dictionaries"),
        new Tag().name("Popular Dictionary").description("Operations related to popular dictionaries"),
        new Tag().name("Property").description("Operations about properties"),
        new Tag().name("Search").description("Operations related to search"),
        new Tag().name("Lookup Data").description("Operations related to lookup data"),
        new Tag().name("Datacat Specifics").description("Datacat specific operations")
    )){{#hasAuthMethods}}
    .components(
        new Components(){{#authMethods}}
            .addSecuritySchemes("{{name}}", new SecurityScheme(){{#isBasic}}
                .type(SecurityScheme.Type.HTTP)
                .scheme("{{scheme}}"){{#bearerFormat}}
                .bearerFormat("{{bearerFormat}}"){{/bearerFormat}}{{/isBasic}}{{#isApiKey}}
                .type(SecurityScheme.Type.APIKEY){{#isKeyInHeader}}
                .in(SecurityScheme.In.HEADER){{/isKeyInHeader}}{{#isKeyInQuery}}
                .in(SecurityScheme.In.QUERY){{/isKeyInQuery}}{{#isKeyInCookie}}
                .in(SecurityScheme.In.COOKIE){{/isKeyInCookie}}
                .name("{{keyParamName}}"){{/isApiKey}}{{#isOAuth}}
                .type(SecurityScheme.Type.OAUTH2){{/isOAuth}}
            ){{/authMethods}}
    ){{/hasAuthMethods}};
    }

    @Bean
    public GroupedOpenApi publicApi() {
        return GroupedOpenApi.builder()
                .group("public")
                .pathsToMatch("/**")
                .build();
    }

}